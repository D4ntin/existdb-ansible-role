# NOTE: when running multiple eXist-db instances on the same host, we
# distinguish between the "eXist-db system user" (var "exist_user") providing
# common filesystem resources to all instances, and the user actually
# running an eXist-db instance (var "exist_instuser"). This means in addition
# to the "existdb" system user, another user account gets created.
#
# This is not needed for single instance scenarios, as long as variable
# "exist_instuser" is left at its default value.
---
## setup system exist user/group/home; ensure login and SSH are disabled

- name: Ensure exist system group is present
  group:
    name: '{{ exist_group }}'

- name: Ensure exist system user is present
  user:
    name: '{{ exist_user }}'
    group: '{{ exist_group }}'
    home: '{{ exist_home }}'
    password: '*'

- name: Ensure exist system dir is owned by exist system user/group
  file:
    path: '{{ exist_home }}'
    state: directory
    owner: '{{ exist_user }}'
    group: '{{ exist_group }}'
    mode: 0771

- name: Ensure exist system dir does not have .ssh/authorized_keys
  file:
    path: '{{ exist_home }}/.ssh/authorized_keys'
    state: absent

## setup exist instance user

- name: Ensure exist instance user is present
  user:
    name: '{{ exist_instuser }}'
    group: '{{ exist_group }}'
    password: "{{ exist_adminpass[inventory_hostname][exist_instname] | password_hash('sha512') }}"
  when: exist_instuser != exist_user

- name: Create sudoers.d fragment for instance user (systemd)
  copy:
    dest: '/etc/sudoers.d/{{ exist_instuser }}'
    content: '{{ exist_instuser }} ALL=(ALL:ALL) NOPASSWD: /bin/systemctl * {{ exist_instname }}'
    mode: 0440
  when: ansible_service_mgr == "systemd"

- name: Create sudoers.d fragment for instance user (SysV init)
  copy:
    dest: '/etc/sudoers.d/{{ exist_instuser }}'
    content: '{{ exist_instuser }} ALL=(ALL:ALL) NOPASSWD: /sbin/service {{ exist_instname }} *'
    mode: 0440
  when: ansible_service_mgr != "systemd"

## increase file descriptor limits for exist instance user

- name: Setup file descriptor limits for user exist from template
  template:
    src: limits.exist.j2
    dest: '/etc/security/limits.d/{{ exist_instuser }}.conf'
  when: exist_fdset_enable == True

- name: Ensure limits get applied by PAM (Debian family)
  lineinfile:
    path: '/etc/pam.d/{{ item }}'
    regexp: 'session\s+required\s+pam_limits.so'
    line: 'session  required  pam_limits.so'
  with_items:
    - login
    - su
  when: exist_fdset_enable == True and ansible_os_family == "Debian"

- name: Ensure limits get applied by PAM (Redhat family)
  lineinfile:
    name: /etc/pam.d/system-auth
    regexp: 'session\s+required\s+pam_limits.so'
    line: 'session  required  pam_limits.so'
  when: exist_fdset_enable == True and ansible_os_family == "RedHat"
