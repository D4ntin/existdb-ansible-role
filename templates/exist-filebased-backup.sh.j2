#!/bin/sh

usage() {
    cat <<EOF
Usage: $0 [-M] instance_name instance_user
   eg: $0 exist50 existdb

Options:
   -M  move instance (i.e. delete it after the backup), this is faster when
       you plan to delete the old instance anyway
EOF
}

while getopts "M" PARAM; do
    case "${PARAM}" in
        M) MOVE=yes;;
        *) usage; exit 1;;
    esac
done
shift $(($OPTIND - 1))

INSTNAME=$1
INSTUSER=$2

EXIST_BASEDIR={{ exist_home }}
BACKUP_DIRNAME=${INSTNAME}.`date +'%Y%m%d%H%M'`
BACKUP_DIR=${EXIST_BASEDIR}/backup/${INSTUSER}/${BACKUP_DIRNAME}
INST_DIR=${EXIST_BASEDIR}/${INSTNAME}
SUPP_FILES="\
 /etc/init.d/${INSTNAME} \
 /etc/systemd/system/${INSTNAME}.service \
 /etc/ansible/facts.d/${INSTNAME}.fact \
 /etc/ansible/facts.d/${INSTNAME}.pl \
"
LOGFILE=`mktemp`
SYSLOG=
export LOGFILE SYSLOG

. ${INST_DIR}/contrib/common-shfuncs.sh

if [ -z "$INSTNAME" ]; then
    logerr 1 "ERROR: no instance name specified, exiting"
fi
if [ -z "$INSTUSER" ]; then
    logerr 1 "ERROR: no instance user specified, exiting"
fi

# if eXist instance is running, stop it first
if psexist -S $INSTNAME | grep -q $INSTNAME; then
    logmsg "stopping running eXist instance \"${INSTNAME}\""
    service ${INSTNAME} stop
    # check again to verify it is really dead, just to be sure
    sleep 3
    if psexist -S $INSTNAME | grep -q $INSTNAME; then
	logerr 2 "ERROR: eXist instance \"${INSTNAME}\" still running after stop command"
    fi
else
    logmsg "eXist instance \"${INSTNAME}\" not running"
fi

# create backup dir
install -d ${BACKUP_DIR} \
    || logerr 2 "ERROR: failed to create backup dir ${BACKUP_DIR}: $!"

# move current eXist-db instance directory and support files to backup dir
if [ "${MOVE}" = yes ]; then 
    for f in ${SUPP_FILES}; do \
	[ -e $f ] && ( mv -f $f ${BACKUP_DIR}/ \
	    || logerr 3 "ERROR: failed to move startup scripts/links: $!" ); done
    mv ${INST_DIR} ${BACKUP_DIR}/ \
        || logerr 3 "ERROR: failed to move instance to backup dir: $!"
else
    for f in ${SUPP_FILES}; do \
	[ -e $f ] && ( cp -f $f ${BACKUP_DIR}/ \
	    || logerr 3 "ERROR: failed to move startup scripts/links: $!" ); done
    rsync -a ${INST_DIR} ${BACKUP_DIR}/ \
        || logerr 3 "ERROR: failed to rsync instance to backup dir: $!"
fi

# return name of new backup dir
echo ${BACKUP_DIRNAME}
